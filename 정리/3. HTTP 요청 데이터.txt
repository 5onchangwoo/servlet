HTTP 요청 데이터

# HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법
주로 3가지 방법을 사용한다.
1. GET - 쿼리 파라미터
    * /url?username=hello&age=20
    * 예) 검색, 필터, 페이징 등에서 많이 사용
2. POST - HTML Form
    * content-type: application/x-www-form-urlencoded
    * 메시지 바디에 쿼리 파라미터 형식으로 전달 username=hello&age=20
    * 예) 회원가입, 상품 주문, HTML Form 사용
3. HTTP message body - 데이터 직접 요청
    * HTTP API에서 주로 사용 (JSON, XML, TEXT)
    * 데이터 형식은 주로 JSON 사용
    * POST, PUT, PATCH


######## GET 쿼리 파라미터 ########
- 클라이언트 -> 서버
(전달 데이터: username=hello, age=20)
>> http:localhost:8080/request-param?username=hello&age=20

- 서버에서는 HttpServletRequest가 제공하는 메서드를 통해 쿼리 파라미터를 편리하게 조회할 수 있다.
String request.getParameter("name"); - 단일 파라미터 값 조회
Enumeration<String> request.getParameterNames(); - 모든 파라미터 이름 조회
Map<String, String[]> request.getParameterMap(); - 파라미터를 Map으로 조회
String[] request.getParameterValues("name"); - 같은 이름의 복수 파라미터 값 조회

# 복수 파라미터에서 단일 파라미터 조회
username=hello&username=kim처럼 파라미터 이름은 하나인데 값이 중복일 경우
- request.getParameter()는 하나의 파라미터 이름에 대해서 단 하나의 값일때 사용할 수 있다.
    (중복일 경우 첫번째에 위치한 값을 반환한다.)
- 해당 내용처럼 하나의 이름에 대해서 복수의 값이 올경우
    request.getParameterValues()를 사용해야 한다.

######## HTTP 요청 데이터 - POST HTML Form ########
- 특정:
    * Content-type: application/x-www-form-urlencoded
    * 메시지 바디에 쿼리 파라미터과 동일한 형식으로 데이터를 전달한다.
      (ex. username=hello&age=20)